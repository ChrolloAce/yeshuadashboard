rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function userExists() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function isCompanyOwner() {
      return isAuthenticated() && userExists() && getUserData().role == 'company_owner';
    }
    
    function isCompanyAdmin() {
      return isAuthenticated() && userExists() && (getUserData().role == 'company_owner' || getUserData().role == 'company_admin');
    }
    
    function isCleaner() {
      return isAuthenticated() && userExists() && getUserData().role == 'cleaner';
    }
    
    function getUserCompanyId() {
      return userExists() ? getUserData().companyId : null;
    }
    
    function belongsToSameCompany(companyId) {
      return isAuthenticated() && userExists() && getUserCompanyId() == companyId;
    }
    
    function isOwnerOfCompany(companyId) {
      return isCompanyOwner() && getUserCompanyId() == companyId;
    }

    // Users collection - users can read/write their own profile
    // Company owners/admins can read their company's users
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId || 
        (isCompanyAdmin() && resource.data.companyId == getUserCompanyId())
      );
      allow write: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated();
    }

    // Companies collection - only company owners can manage their own company
    match /companies/{companyId} {
      allow read: if belongsToSameCompany(companyId);
      allow write: if isOwnerOfCompany(companyId);
      // Allow company creation if user is authenticated and they're setting themselves as owner
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.ownerId &&
        request.resource.data.ownerId != null;
    }

    // Cleaner profiles - cleaners can manage their own, company admins can read their company's cleaners
    match /cleaner_profiles/{cleanerId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == cleanerId ||
        (isCompanyAdmin() && resource.data.companyId == getUserCompanyId())
      );
      allow write: if isAuthenticated() && request.auth.uid == cleanerId;
      allow create: if isAuthenticated() && request.auth.uid == resource.id;
    }

    // Clients collection - company-scoped access
    match /clients/{clientId} {
      allow read, write: if isAuthenticated() && (
        belongsToSameCompany(resource.data.companyId) ||
        !userExists() // Allow during initial setup when user profile doesn't exist yet
      );
      allow create: if isAuthenticated() && (
        belongsToSameCompany(request.resource.data.companyId) ||
        !userExists() // Allow during initial setup
      );
    }

    // Quotes collection - company-scoped access
    match /quotes/{quoteId} {
      allow read, write: if isAuthenticated() && (
        belongsToSameCompany(resource.data.companyId) ||
        !userExists() // Allow during initial setup when user profile doesn't exist yet
      );
      allow create: if isAuthenticated() && (
        belongsToSameCompany(request.resource.data.companyId) ||
        !userExists() // Allow during initial setup
      );
    }

    // Jobs collection - company-scoped access with role-based permissions
    match /jobs/{jobId} {
      allow read: if isAuthenticated() && belongsToSameCompany(resource.data.companyId);
      allow write: if isAuthenticated() && belongsToSameCompany(resource.data.companyId) && (
        isCompanyAdmin() || 
        (isCleaner() && request.auth.uid in resource.data.assignedCleaners)
      );
      allow create: if isAuthenticated() && belongsToSameCompany(request.resource.data.companyId) && isCompanyAdmin();
    }

    // Teams collection - company-scoped access
    match /teams/{teamId} {
      allow read: if isAuthenticated() && belongsToSameCompany(resource.data.companyId);
      allow write: if isAuthenticated() && belongsToSameCompany(resource.data.companyId) && isCompanyAdmin();
      allow create: if isAuthenticated() && belongsToSameCompany(request.resource.data.companyId) && isCompanyAdmin();
    }

    // File uploads and media - company-scoped
    match /uploads/{companyId}/{document=**} {
      allow read, write: if belongsToSameCompany(companyId);
    }

    // Notifications - user-specific
    match /notifications/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Company-specific settings
    match /company_settings/{companyId} {
      allow read: if belongsToSameCompany(companyId);
      allow write: if isOwnerOfCompany(companyId);
    }

    // Analytics snapshots - allow authenticated users to create/read
    match /analytics_snapshots/{snapshotId} {
      allow read, create: if isAuthenticated();
      allow update, delete: if false; // No updates/deletes allowed
    }

    // Financial records - allow authenticated users to create/read
    match /financial_records/{recordId} {
      allow read, create: if isAuthenticated();
      allow update, delete: if false; // No updates/deletes allowed
    }

    // Company metrics - allow authenticated users to create/read/update
    match /company_metrics/{companyId} {
      allow read, create, update: if isAuthenticated();
      allow delete: if false; // No deletes allowed
    }

    // Audit logs - company owners can read their company's logs
    match /audit_logs/{companyId}/{document=**} {
      allow read: if isOwnerOfCompany(companyId);
      allow write: if belongsToSameCompany(companyId);
    }

    // Default fallback - deny all access to unmatched paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}